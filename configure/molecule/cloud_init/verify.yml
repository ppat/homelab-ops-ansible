---
- name: Verify
  hosts: all
  gather_facts: false
  vars:
    data_source_path: "/mnt/cloudinit"
    cloud_init_files:
    - "{{ data_source_path }}/user-data"
    - "{{ data_source_path }}/meta-data"
    - "{{ data_source_path }}/vendor-data"
    - "{{ data_source_path }}/runcmd/playbook.yaml"
    - "{{ data_source_path }}/runcmd/playbook-vars.yaml"
    required_datasource_keys:
      user-data:
      - users
      - hostname
      - runcmd
      meta-data:
      - local-hostname
      - instance-id
    required_user_keys:
    - name
    - groups
    - sudo
    - ssh_authorized_keys
    - lock_passwd
    - shell
    expected_runcmd_count: 2
  tasks:
  - name: Stat for generated cloud_init files
    ansible.builtin.stat:
      path: "{{ item }}"
    loop: "{{ cloud_init_files }}"
    register: cloudinit_stat

  - name: Assert that cloudinit exists at destination
    ansible.builtin.assert:
      that:
      - item.stat.exists
      fail_msg: "{{ item.item }} does NOT exist at expected location"
      success_msg: "{{ item.item }} has been generated"
    loop: "{{ cloudinit_stat.results }}"

  - name: "Read generated cloudinit files"
    ansible.builtin.slurp:
      src: "{{ item }}"
    register: cloudinit_generated
    loop: "{{ cloud_init_files }}"

  - name: "Display generated cloud init file"
    ansible.builtin.debug:
      msg: "{{ item['content'] | b64decode }}"
    loop: "{{ cloudinit_generated.results }}"

  - name: "Parse generated cloud-init datasource file content"
    when: (item['item'] | basename) is in ['user-data', 'meta-data']
    ansible.builtin.set_fact:
      generated_datasource: "{{ generated_datasource | default({}) | combine({ds_name: parsed_value}) }}"
    vars:
      ds_name: "{{ item['item'] | basename }}"
      parsed_value: "{{ item['content'] | b64decode | from_yaml }}"
    loop: "{{ cloudinit_generated.results }}"

  - name: "Display generated cloud init datasource file"
    ansible.builtin.debug:
      msg: "{{ generated_datasource[item] }}"
    loop: "{{ generated_datasource }}"

  - name: "Assert that required user-data keys are present"
    ansible.builtin.assert:
      that: item in generated_datasource['user-data']
    loop: "{{ required_datasource_keys['user-data'] }}"

  - name: "Assert that required meta-data keys are present"
    ansible.builtin.assert:
      that: item in generated_datasource['meta-data']
    loop: "{{ required_datasource_keys['meta-data'] }}"

  - name: "Assert that the required ssh-user keys are present"
    ansible.builtin.assert:
      that: item in generated_datasource['user-data'].users[0]
    loop: "{{ required_user_keys'] }}"

  - name: "Assert that expected number of run commands are present"
    ansible.builtin.assert:
      that: (generated_datasource['user-data'].runcmd|length) == expected_runcmd_count
    loop: "{{ required_user_keys'] }}"
