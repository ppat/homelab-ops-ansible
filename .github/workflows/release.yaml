---
name: Release

# yamllint disable-line rule:truthy
on:
  pull_request:
    paths:
    - '.github/workflows/release.yaml'
    - '.node-version'
    - '.releaserc.js'
    - 'package.json'
    - 'package-lock.json'
    - 'poetry.lock'
    - 'pyproject.toml'
    - '**/galaxy.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    name: "release"
    steps:
    - name: Check out
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        token: "${{ secrets.GH_RELEASE_TOKEN }}"
        fetch-depth: 0

    - name: Setup poetry
      run: pipx install poetry==$POETRY_VERSION
      env:
        # renovate: datasource=pypi depName=poetry
        POETRY_VERSION: "2.0.1"

    - name: Set up python
      uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5
      with:
        python-version: '3.12'
        cache: 'poetry'

    - name: Install python requirements
      run: |
        poetry --version
        poetry install --no-interaction
        poetry env info

    - name: Set up node
      uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4
      with:
        node-version-file: '.node-version'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install node packages
      run: npm ci --no-fund --no-audit

    - name: Release - dry run
      if: github.event_name == 'pull_request'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
      run: |
        CURRENT_BRANCH=$GITHUB_HEAD_REF
        GITHUB_REF=$CURRENT_BRANCH
        set -x
        npx semantic-release --dry-run --no-ci --branches $CURRENT_BRANCH

    - name: Release
      if: github.event_name == 'workflow_dispatch'
      env:
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
      run: npx semantic-release

    - name: Transform README links for ansible-galaxy
      # yamllint disable-line rule:indentation
      run: |
        # Find all README.md files in collection directories, excluding node_modules
        find . -type f -name "README.md" -not -path "./node_modules/*" | while read -r file; do
          echo "Transforming links in $file..."
          # Get the relative path from the file to the repo root
          rel_path=$(dirname "$file" | sed 's/^\.\///')

          # Create a backup of the original file
          cp "$file" "${file}.bak"

          # Replace relative paths with absolute GitHub raw content URL
          # Handle paths starting with ./ or ../
          sed -i -E 's@(\[.*\])\((\.\.?/)+@\1(https://raw.githubusercontent.com/ppat/homelab-ops-ansible/refs/heads/main/@g' "$file"

          # Handle paths that don't start with ./ but are relative to current directory
          sed -i -E "s@(\[.*\])\(([^/][^:)]+)@\1(https://raw.githubusercontent.com/ppat/homelab-ops-ansible/refs/heads/main/$rel_path/\2@g" "$file"

          # Clean up any double slashes in URLs (except for https://)
          sed -i -E 's@([^:])//+@\1/@g' "$file"

          echo "Transformed $file"
        done

    - name: Build collections
      run: |
        # no dependencies on homelab_ops collections
        poetry run ansible-galaxy collection build ./archive/ --output-path $OUTPUT_DIR
        poetry run ansible-galaxy collection build ./block_device/ --output-path $OUTPUT_DIR
        poetry run ansible-galaxy collection build ./configure/ --output-path $OUTPUT_DIR
        poetry run ansible-galaxy collection build ./packages/ --output-path $OUTPUT_DIR

        # depends on packages
        poetry run ansible-galaxy collection build ./k3s/ --output-path $OUTPUT_DIR
        poetry run ansible-galaxy collection build ./os/ --output-path $OUTPUT_DIR

        # depends on archive, block_device, configure
        poetry run ansible-galaxy collection build ./raspberry_pi/ --output-path $OUTPUT_DIR
      env:
        OUTPUT_DIR: dist/

    - name: Publish to ansible-galaxy collection
      if: ${{ github.event_name == 'workflow_dispatch' }}
      # yamllint disable-line rule:indentation
      run: |
        set -eo pipefail

        for collection in $(find dist/ -type f -name homelab_ops-*.tar.gz); do
          echo "Publishing ${collection}..."
          poetry run ansible-galaxy collection publish --token ${AG_API_TOKEN} $collection
          echo
        done
      shell: bash
      env:
        AG_API_TOKEN: ${{ secrets.ANSIBLE_GALAXY_API_TOKEN }}
