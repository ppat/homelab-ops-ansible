---
# ----------------------------------------------------------------------------------------------------------
# kubernetes resources
# ----------------------------------------------------------------------------------------------------------
- name: "kubernetes-resource-checks | Fetch resources from cluster"
  kubernetes.core.k8s_info:
    kubeconfig: /tmp/kubeconfig/k3s
    namespace: "{{ item.namespace }}"
    kind: "{{ item.kind }}"
    name: "{{ item.name }}"
  register: resource_state
  loop: "{{ required_resources }}"
  loop_control:
    label: "{{ item.kind }}/{{ item.name }}"

- name: "kubernetes-resource-checks | Group resources into map by key"
  ansible.builtin.set_fact:
    resource_state_map: "{{ resource_state_map | default({}) | combine({resource_key: item | community.general.json_query(query) | flatten | first}) }}"
  vars:
    resource_key: "{{ item.item.kind }}/{{ item.item.name }}"
    # yamllint disable-line rule:line-length
    query: "resources[*].{created: metadata.creationTimestamp, name: metadata.name, namespace: metadata.namespace, labels: metadata.labels, status: status.conditions[*].join('=', [type,status]), status_reason: status.conditions[*].join(' > ', [type,reason,message])}"  # noqa: var-naming[no-role-prefix]
  loop: "{{ resource_state.results }}"
  loop_control:
    label: "{{ resource_key }}"

- name: "kubernetes-resource-checks | Show resource map"
  when: ansible_verbosity > 0
  debug:
    msg: "{{ resource_state_map }}"

- name: "kubernetes-resource-checks | Assert that required resources exist"
  ansible.builtin.assert:
    that: expected_key in actual_keys
  vars:
    actual_keys: "{{ resource_state_map.keys() }}"
    expected_key: "{{ expected.kind }}/{{ expected.name }}"
  loop: "{{ required_resources }}"
  loop_control:
    loop_var: expected
    label: "{{ expected_key }}"

- name: "kubernetes-resource-checks | Assert that required resources are in ready state"
  ansible.builtin.assert:
    that: >
      not resource_state_map[expected_key].status
      or
      'Ready=True' in resource_state_map[expected_key].status
      or
      'Available=True' in resource_state_map[expected_key].status
  vars:
    expected_key: "{{ expected.kind }}/{{ expected.name }}"
  loop: "{{ required_resources }}"
  loop_control:
    loop_var: expected
    label: "{{ expected_key }}"
