---
# ----------------------------------------------------------------------------------------------------------
# bootstrap configuration
# ----------------------------------------------------------------------------------------------------------
- name: "bootstrap-config-checks | Fetch bootstrap configuration from cluster"
  kubernetes.core.k8s_info:
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    namespace: "{{ item.namespace }}"
    kind: "{{ item.kind }}"
    name: "{{ item.name }}"
  register: bootstrap_config_state
  loop: "{{ required_bootstrap_resources }}"
  loop_control:
    label: "{{ item.kind }}/{{ item.name }}"

- name: "bootstrap-config-checks | Extract bootstrap settings into map"
  ansible.builtin.set_fact:
    bootstrap_settings_map: "{{ bootstrap_settings_map | default({}) | combine({config_key: config_value}) }}"
  vars:
    config_key: "{{ item.item.kind }}/{{ item.item.name }}"
    config_value: "{{ item | community.general.json_query('resources[*].{fields: keys(data)}') | flatten | first }}"
  loop: "{{ bootstrap_config_state.results }}"

- name: "bootstrap-config-checks | Show bootstrap config"
  debug:
    msg: "{{ bootstrap_settings_map }}"

- name: "bootstrap-config-checks | Assert that all expected bootstrap resources are present"
  ansible.builtin.assert:
    that: expected_key in actual_keys
  vars:
    actual_keys: "{{ bootstrap_settings_map.keys() }}"
    expected_key: "{{ expected.kind }}/{{ expected.name }}"
  loop: "{{ required_bootstrap_resources }}"
  loop_control:
    loop_var: expected
    label: "{{ expected_key }}"

- name: "bootstrap-config-checks | Assert that all expected fields are present in bootstrap resources"
  ansible.builtin.assert:
    # assert that all expected fields are present in actual
    # while allowing actual to contain additional fields than expected
    that: "{{ expected.fields | difference(actual.fields) | length == 0 }}"
  vars:
    actual: "{{ bootstrap_settings_map[expected.kind + '/' + expected.name] }}"
  loop: "{{ required_bootstrap_resources }}"
  loop_control:
    loop_var: expected
    label: "{{ expected.kind }}/{{ expected.name }}"
