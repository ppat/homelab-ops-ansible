---
- name: "Create directories"
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: '0750'
    state: directory
  loop:
  - /etc/rancher/k3s
  - /etc/rancher/node
  - /var/lib/rancher
  - /var/lib/rancher/k3s
  - /var/lib/rancher/k3s/server
  - /etc/rancher/k3s/status

- name: "prepare | Fetch k3s binary: {{ k3s_binary_url }}"
  ansible.builtin.include_role:
    name: homelab_ops.packages.install_from_url
  vars:
    package:  # noqa: var-naming[no-role-prefix]
      name: "k3s"
      url: "{{ k3s_binary_url }}"
      mode: '0750'
      path: /usr/local/bin

- name: "prepare | Fetch k3s installer script: {{ k3s_installer_script_url }}"
  ansible.builtin.get_url:
    url: "{{ k3s_installer_script_url }}"
    dest: /root/k3s-install.sh
    owner: root
    group: root
    mode: '0400'

- name: "prepare | Create wrapper script for installer script"
  ansible.builtin.copy:
    src: k3s-node-init.sh
    dest: /root/k3s-node-init.sh
    owner: root
    group: root
    mode: '0750'

- name: "prepare | Configure private registries"
  ansible.builtin.template:
    src: k3s-registries.yaml.j2
    dest: /etc/rancher/k3s/registries.yaml
    owner: root
    group: root
    mode: '0600'
  when: k3s.registry is defined and k3s.registry.endpoint is defined and k3s.registry.mirrors|length > 0

- name: "prepare | Create k3s config file"
  ansible.builtin.template:
    src: k3s-config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: '0600'

- name: "prepare | Create kubelet config file"
  ansible.builtin.template:
    src: k3s-kubelet.yaml.j2
    dest: "{{ standard_locations.kubelet_config }}"
    owner: root
    group: root
    mode: '0600'

- name: "prepare | Write cluster tokens to temp file"
  ansible.builtin.copy:
    content: "{{ k3s.tokens[item] }}"
    dest: "/tmp/k3s_token_{{ item }}"
    owner: root
    group: root
    mode: '0600'
  loop: "{{ (k3s.node.type == 'server') | ternary(['server', 'agent'], ['agent']) }}"
  no_log: true

- name: "prepare | Create files necessary for meeting CIS Hardening security standard"
  when: cis_hardening_enabled and k3s.node.type == 'server' and item.source != ''
  ansible.builtin.copy:
    src: "{{ item.source }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0600'
  loop:
  - source: "{{ pod_security_admission_file }}"
    dest: "{{ standard_locations.pod_security_admission }}"
  - source: "{{ audit_policy_file }}"
    dest: "{{ standard_locations.audit_policy }}"
